---
name: Titanium.UI.Slider
summary: A slider component with a draggable thumb.
description: |
    | Android | iOS |
    | ------- | --- |
    | ![Android](./slider_android.png) | ![iOS](./slider_ios.png) |

    A slider lets the user select from a range of values by dragging the slider thumb.

    Use the <Titanium.UI.createSlider> method or **`<Slider>`** Alloy element to create a slider.

    #### Android Platform Implementation Notes

    On Android, the user can also maniuplate the slider using the arrow keys. For this
    reason, placing other focusable UI elements to the left or right of
    the slider is not recommended.

    On Android, both `min` and `max` must be specified for the slider to work properly.

    Earlier versions of the Titanium SDK implicitly enforced that both the [leftTrackImage](Titanium.UI.Slider.leftTrackImage) and
    [rightTrackImage](Titanium.UI.Slider.rightTrackImage) properties be specified before the properties would be honored. Beginning with
    Titanium SDK 4.0.0 this limitation has been removed. However it is recommended that either both or neither be specified.

    To style different parts of the Slider you can set these properties in a custom Android theme:
    ``` xml
      <item name="android:progressBackgroundTint">#f4511e</item>
      <item name="android:progressTint">#388e3c</item>
      <item name="android:thumbTint">#c51162</item>
    ```
    You can also use `@android:color/transparent` to remove the tint.

extends: Titanium.UI.View
excludes:
    events: [pinch]
    properties: [height, children]
    methods: [add, remove, removeAllChildren, replaceAt]

since: "0.8"
examples:
  - title: Simple Slider
    example: |
        The following sample demonstrates creating a slider and adding a listener to
        handle the change events.

        ``` js
        var slider = Titanium.UI.createSlider({
            top: 50,
            min: 0,
            max: 100,
            width: Ti.UI.FILL,
            value: 50
            });

        var label = Ti.UI.createLabel({
            text: slider.value,
            width: Ti.UI.FILL,
            top: 30,
            left: 0,
            textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER
        });

        slider.addEventListener('change', function(e) {
            label.text = String.format('%3.1f', e.value);
        });
        ```

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        Implement the `updateLabel` callback in the controller to update the label value
        and set the initial `text` value for the label in the TSS file or controller.

        index.xml:

        ``` xml
        <Alloy>
            <Window id="window" backgroundColor="white">
                <Slider id="slider" top="50" min="0" max="100" width="Ti.UI.FILL" value="50" onChange="updateLabel"/>
                <Label id="label" width="Ti.UI.FILL" top="30" left="0" />
            </Window>
        </Alloy>
        ```

        index.js:

        ``` js
        $.slider.text = $.slider.value;
        function updateLabel(e) {
            $.label.text = String.format('%3.1f', e.value);
        }
        $.window.open();
        ```

  - title: Slider with Steps (Android)
    example: |
        This example demonstrates creating sliders that snap to predefined step values.
        The slider will automatically snap to the nearest step when the user drags the thumb.

        ``` js
        // Method 1: Using step count (automatically divides range into equal steps)
        var slider1 = Ti.UI.createSlider({
            top: 50,
            min: 0,
            max: 100,
            width: Ti.UI.FILL,
            value: 50,
            steps: 5  // Creates 5 equal steps: 0, 25, 50, 75, 100
        });

        // Method 2: Using array of specific step values
        var slider2 = Ti.UI.createSlider({
            top: 120,
            min: 0,
            max: 100,
            width: Ti.UI.FILL,
            value: 10,
            steps: [0, 10, 25, 50, 75, 100]  // Custom step values
        });

        var label1 = Ti.UI.createLabel({
            text: 'Equal Steps: ' + slider1.value,
            width: Ti.UI.FILL,
            top: 30,
            left: 0,
            textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER
        });

        var label2 = Ti.UI.createLabel({
            text: 'Custom Steps: ' + slider2.value,
            width: Ti.UI.FILL,
            top: 100,
            left: 0,
            textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER
        });

        slider1.addEventListener('change', function(e) {
            label1.text = 'Equal Steps: ' + e.value;
        });

        slider2.addEventListener('change', function(e) {
            label2.text = 'Custom Steps: ' + e.value;
        });
        ```

methods:
  - name: setValue
    summary: Sets the [value](Titanium.UI.Slider.value) property.
    description: |
        On iOS, you can specify that the value change should be animated by passing the
        optional `options` parameter.
    platforms: [iphone,ipad,macos]
    parameters:

      - name: value
        summary: New value for the [value](Titanium.UI.Slider.value) property.
        type: Number

      - name: options
        summary: |
            Specifies animation options. The only supported property
            for this dictionary is the `animated` flag, which specifies whether
            the value change should be animated. `animated` is false by default. Only used
            on iOS.
        type: AnimatedOptions
        optional: true
        default: "{ animated: false }"

events:
  - name: change
    summary: Fired when the value of the slider changes.
    properties:

      - name: value
        summary: New value of the slider.
        type: Number

      - name: thumbSize
        summary: |
            Dictionary with properties `width` and `height` of the size of the thumb.
            Available with custom thumb image.
        type: Size
        platforms: [android]

      - name: thumbOffset
        summary: |
            Dictionary with properties `x` and `y` of the thumb's left-top corner in
            the control. Available with custom thumb image.
        type: Point
        platforms: [android]

      - name: isTrusted
        summary: True if change was made by the user. False if change was made programmatically.
        type: Boolean
        since: 9.1.0

  - name: click
    summary: Fired when the device detects a click against the view.
    description: |
        There is a subtle difference between singletap and click events.

        A singletap event is generated when the user taps the screen briefly
        without moving their finger. This gesture will also generate a click event.

        However, a click event can also be generated when the user touches,
        moves their finger, and then removes it from the screen.

        For sliders on Android, the click event is **only** generated by a trackball click
        on the slider thumb.
    platforms: [android]
    properties:

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: start
    summary: Fired when the user starts tracking the slider.

    platforms: [android, iphone, ipad, macos]
    since: 3.1.0
    properties:

      - name: value
        summary: Current value of the slider.
        type: Number

      - name: bubbles
        summary: False. This event does not bubble.
        type: Boolean

  - name: stop
    summary: Fired when the user stops tracking the slider.

    platforms: [android, iphone, ipad, macos]
    since: 3.1.0
    properties:

      - name: value
        summary: Current value of the slider.
        type: Number

      - name: bubbles
        summary: False. This event does not bubble.
        type: Boolean

properties:
  - name: disabledLeftTrackImage
    summary: Image URL of the slider left track when in the disabled state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: disabledRightTrackImage
    summary: Image URL of the slider right track when in the disabled state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: disabledThumbImage
    summary: Image URL of the slider thumb when in the disabled state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: enabled
    summary: Boolean to indicate the enabled state of the slider.
    type: Boolean
    default: Slider is enabled by default (property value may be `undefined`).

  - name: highlightedLeftTrackImage
    summary: Image URL of the slider left track when in the highlighted state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: highlightedRightTrackImage
    summary: Image URL of the slider right track when in the highlighted state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: highlightedThumbImage
    summary: Image URL of the slider thumb when in the highlighted state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: leftTrackImage
    summary: Image URL of the slider left track.
    description: |
        See introduction of the <Titanium.UI.Slider> component for implementation specific information on Android Platform.
    type: String
    platforms: [android, iphone, ipad, macos]

  - name: leftTrackLeftCap
    summary: Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
    description: |
        This property must be set before the track images are loaded. When specified at creation
        this property is loaded before loading any of the track images

        End caps specify the portion of an image that should not be resized when an image is
        stretched. This technique is used to implement buttons and other resizable image-based
        interface elements. When an image with end caps is resized, the resizing occurs only in
        the middle of the image, in the region between the end caps. The end caps themselves keep
        their original size and appearance. This property specifies the size of the left end cap.
    type: Number
    default: 1.0
    since: 3.0.0
    platforms: [iphone, ipad, macos]

  - name: leftTrackTopCap
    summary: Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
    description: |
        This property must be set before the track images are loaded. When specified at creation
        this property is loaded before loading any of the track images

        End caps specify the portion of an image that should not be resized when an image is
        stretched. This technique is used to implement buttons and other resizable image-based
        interface elements. When an image with end caps is resized, the resizing occurs only in
        the middle of the image, in the region between the end caps. The end caps themselves keep
        their original size and appearance. This property specifies the size of the top end cap.
    type: Number
    default : 1.0
    since: 3.0.0
    platforms: [iphone, ipad, macos]

  - name: max
    summary: Maximum value of the slider.
    description: |
        Specifies the value of the slider when the thumb is all the way to the right. This
        value is inclusive.

        On Android, the selectable values can be limited using the
        [minRange](Titanium.UI.Slider.minRange) and [maxRange](Titanium.UI.Slider.maxRange)
        properties.

        On Android this must be an integer value.
    type: Number
    default: 1. (property value might be undefined)

  - name: maxRange
    summary: Upper limit on the slider value that can be selected.
    description: |
        If `maxRange` is specified, value of the slider can't be increased above `maxRange`.

        The total displayed range of the slider is still from `min` to `max`.

        If `undefined`, the slider can go all the way to `max`.

        On Android this must be an integer value.
    type: Number
    platforms: [android]
    default: undefined

  - name: min
    summary: Minimum value of the slider.
    description: |
        Specifies the value of the slider when the thumb is all the way to the left. This
        value is inclusive.

        On Android, the selectable values can be limited using the
        [minRange](Titanium.UI.Slider.minRange) and [maxRange](Titanium.UI.Slider.maxRange)
        properties.

        On Android this must be an integer value.
    type: Number
    default: 0. (property value might be undefined)

  - name: minRange
    summary: Lower limit on the slider value that can be selected.
    description: |
        If `minRange` is specified, value of the slider can't be decreased below `minRange`.

        The total displayed range of the slider is still from `min` to `max`.

        If `undefined`, the slider can go all the way to `min`.

        On Android this must be an integer value.
    platforms: [android]
    type: Number
    default: undefined

  - name: rightTrackImage
    summary: Image URL of the slider right track.
    description: |
        See introduction of the <Titanium.UI.Slider> component for implementation specific information on Android Platform.
    type: String
    platforms: [android, iphone, ipad, macos]

  - name: rightTrackLeftCap
    summary: Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
    description: |
        This property must be set before the track images are loaded. When specified at creation
        this property is loaded before loading any of the track images

        End caps specify the portion of an image that should not be resized when an image is
        stretched. This technique is used to implement buttons and other resizable image-based
        interface elements. When an image with end caps is resized, the resizing occurs only in
        the middle of the image, in the region between the end caps. The end caps themselves keep
        their original size and appearance. This property specifies the size of the left end cap.
    type: Number
    default: 1.0
    since: 3.0.0
    platforms: [iphone, ipad, macos]

  - name: rightTrackTopCap
    summary: Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
    description: |
        This property must be set before the track images are loaded. When specified at creation
        this property is loaded before loading any of the track images

        End caps specify the portion of an image that should not be resized when an image is
        stretched. This technique is used to implement buttons and other resizable image-based
        interface elements. When an image with end caps is resized, the resizing occurs only in
        the middle of the image, in the region between the end caps. The end caps themselves keep
        their original size and appearance. This property specifies the size of the top end cap.
    type: Number
    default : 1.0
    since: 3.0.0
    platforms: [iphone, ipad, macos]

  - name: selectedLeftTrackImage
    summary: Image URL of the slider left track when in the selected state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: selectedRightTrackImage
    summary: Image URL of the slider right track when in the selected state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: selectedThumbImage
    summary: Image URL of the slider thumb when in the selected state.
    type: String
    platforms: [iphone, ipad, macos]

  - name: splitTrack
    summary: Determines whether the thumb image is split in half and drawn on top of the track.
    description: |
        If this property is `true`, the track is divided into two parts: the parts before and
        after the position of the slider's thumb. The `leftTrackImage` is displayed to the left
        of the thumb, and the `rightTrackImage` is displayed to the right of the thumb.

        If this property is `false`, the thumb is drawn on top of the track image.
    type: Boolean
    default: false
    platforms: [android]
    since: "3.2.3"

  - name: steps
    summary: Array of values that the slider should snap to, or number of equal steps to divide the slider range.
    description: |
        When this property is set, the slider will automatically snap to the nearest step value
        when the user drags the thumb. This provides a discrete selection experience instead
        of continuous values.
        
        **Two ways to use steps:**
        
        1. **Array of specific values**: `[0, 25, 50, 75, 100]` - slider snaps to these exact values
        2. **Step count**: `5` - automatically divides the slider range into 5 equal steps
        
        For arrays, values will be automatically sorted internally and should be within the 
        slider's min/max range.
        
        For step count, the value must be greater than 1. The steps will be evenly distributed
        across the entire slider range from min to max.
        
        Examples:
        - `steps: [0, 10, 25, 50, 100]` - custom step values
        - `steps: 6` - creates steps at 0, 20, 40, 60, 80, 100 (for min=0, max=100)
    type: [Array<Number>, Number]
    platforms: [android, iphone, ipad, macos]
    since: "12.5.0"

  - name: stepValues
    summary: When enabled with steps, returns step indices (0, 1, 2...) instead of actual step values.
    description: |
        This property only has effect when the `steps` property is also set. When `stepValues` is `true`,
        the slider will return step indices (0, 1, 2, 3...) instead of the actual step values.
        
        This is useful when you want clean integer indices representing which step is selected,
        regardless of the actual min/max range or step values.
        
        **Example:**
        ```javascript
        var slider = Ti.UI.createSlider({
            min: 0,
            max: 100,
            steps: 5,          // Creates steps at: 0, 25, 50, 75, 100
            stepValues: true   // Returns: 0, 1, 2, 3, 4 instead
        });
        
        slider.addEventListener('change', function(e) {
            // e.value will be 0, 1, 2, 3, or 4
            console.log('Step index:', e.value);
        });
        ```
        
        Without `stepValues`, the same slider would return 0, 25, 50, 75, 100.
        With `stepValues: true`, it returns 0, 1, 2, 3, 4.
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos]
    since: "12.5.0"

  - name: thumbImage
    summary: Image for the slider thumb.
    description: |
        The thumb image can be specified as a URL.

        Support for using <Titanium.Blob> for this property is only available on iOS.
        
        On Android, you can also use:
        - Resource IDs (integers) to reference XML drawable resources
        - File paths to images in the Resources directory
        
        **Example using XML drawable resource:**
        ```javascript
        var slider = Ti.UI.createSlider({
            thumbImage: Ti.Platform.Android.R.drawable.my_custom_thumb
        });
        ```
    type: [String, Titanium.Blob, Number]
    platforms: [android, iphone, ipad, macos]

  - name: thumbSize
    summary: Custom size for the slider thumb.
    description: |
        Allows you to specify custom dimensions for the slider thumb. This is particularly useful
        when using XML drawable resources or when you want to resize the default thumb.
        
        You can specify the size in several ways:
        - As a number (applies to both width and height)
        - As an object with `width` and `height` properties
        
        **Examples:**
        ```javascript
        // Square thumb, 40dp x 40dp
        var slider = Ti.UI.createSlider({
            thumbSize: 40
        });
        
        // Custom width and height
        var slider = Ti.UI.createSlider({
            thumbSize: {
                width: 50,
                height: 30
            }
        });
        
        // Combined with custom XML drawable
        var slider = Ti.UI.createSlider({
            thumbImage: Ti.Platform.Android.R.drawable.my_custom_thumb,
            thumbSize: 45
        });
        ```
        
        If no `thumbImage` is specified, a default circular thumb will be created with the specified size.
    type: [Number, Dictionary]
    platforms: [android]
    since: "12.6.0"

  - name: tintColor
    summary: The color shown for the portion of the progress bar that is filled.
    type: [String, Titanium.UI.Color]
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", android: "8.3.0"}

  - name: trackTintColor
    summary: The color shown for the portion of the progress bar that is not filled.
    type: [String, Titanium.UI.Color]
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "8.3.0", ipad: "8.3.0", android: "8.3.0"}

  - name: value
    summary: Current value of the slider.
    type: Number
